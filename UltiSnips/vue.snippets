# This snippet file enables vue files to use tabs for html, js and css. It also
# includes some vue-specific html-like snippets, as well as some general
# boilerplate code for vue.

extends html, javascript, css

# These snippets form a port of Sarah Drasner's vue-sublime-snippets

# some html-like snippets

snippet slot
<slot></slot>
endsnippet
snippet template
<template></template>
endsnippet
snippet transition
<transition></transition>
endsnippet

snippet vue2
<template>
	<div id="${1:Name}">
		
	</div>
</template>

<script>
export default{
	name: '$1',
	data(){
		return{}
	},	
};
</script>

<style scoped>

</style>
endsnippet

snippet vues 
<script setup>

</script>

<template>
	<div id="${1:Name}">
		
	</div>
</template>

<style scoped>

</style>
endsnippet

snippet vue 
<template>
	<div id="${1:Name}">
		
	</div>
</template>

<script>
export default{
	name: '$1',
	setup(){
		
		return{}
	},	
};
</script>

<style scoped>

</style>
endsnippet

snippet iv
import { ${1:New} } from 'vue';
endsnippet

snippet ivc
import ${1:Name} from '@/components/$1.vue';
endsnippet

snippet ivs
import { ${1:Name} } from '@/stores/';
endsnippet

snippet ivx
import { ${1:Name} }from 'vuex';
endsnippet

snippet ivp
import { ${1:New} } from 'pinia';
endsnippet

snippet ivr
import { ${1:New} } from 'vue-router';
endsnippet

snippet vactions
	actions: {
		${1:updateValue}({commit}, ${2:payload}) {
			commit($1, $2);
		}
	}
endsnippet
# Add in js animation hooks
snippet vanim:js:el
	<transition
	  @before-enter="beforeEnter"
	  @enter="enter"
	  @after-enter="afterEnter"
	  @enter-cancelled="enterCancelled"

	  @before-Leave="beforeLeave"
	  @leave="leave"
	  @after-leave="afterLeave"
	  @leave-cancelled="leaveCancelled"
	  :css="false">

	 </transition>
endsnippet
snippet vanim:js:method
	methods: {
		beforeEnter(el) {
			console.log('beforeEnter');
		},
		enter(el, done) {
			console.log('enter');
			done();
		},
		afterEnter(el) {
			console.log('afterEnter');
		},
		enterCancelled(el, done) {
			console.log('enterCancelled');
		},
		beforeLeave(el) {
			console.log('beforeLeave');
		},
		leave(el, done) {
			console.log('leave');
			done();
		},
		afterLeave(el) {
			console.log('afterLeave');
		},
		leaveCancelled(el, done) {
			console.log('leaveCancelled');
		}
	}
endsnippet
snippet vcl
@click="${1}"
endsnippet
snippet vdata
	data() {
		return {
			${1:key}: ${2:value}
		};
	}
endsnippet

snippet vfilter
	filters: {
		${1:fnName}: function(${2:value}) {
			return;
		}
	}
endsnippet

snippet vfor
	<div v-for="${1:item} in ${2:items}" :key="$1.id">
		{{ $1 }}
	</div>
endsnippet

snippet vgetters
	getters: {
		${1:value}: state => {
			return state.$1;
		}
	}
endsnippet
snippet vkeep
	<keep-alive>
		<component :is="">
			<p>default</p>
		</component>
	</keep-alive>
endsnippet
snippet vmixin
	const ${1:mixinName} = {
		mounted() {
			console.log('hello from mixin!')
		},
	}
	const ${2:Component} = Vue.extend({
		mixins: [$1]
	})
endsnippet
snippet vmutations
	mutations: {
		${1:updateValue}(state, ${3:payload}) => {
			state.${2:value} = $3;
		}
	}
endsnippet
snippet vprops
	${1:propName}: {
	  type: ${2:Number},
	  default: ${0}
	},
endsnippet
snippet vstore
	import Vue from 'vue';
	import Vuex from 'vuex';

	Vue.use(Vuex);

	export const store = new Vuex.Store({
		state: {
			${1:key}: ${2:value}
		}
	});
endsnippet

# vue-i18n snippets https://github.com/kazupon/vue-i18n

snippet trans
	$t('$1')
endsnippet
# Translation with parameter
snippet transc
	$t('$1', { $2: $3 })
endsnippet
